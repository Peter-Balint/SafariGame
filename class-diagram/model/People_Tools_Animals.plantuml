@startuml oszt√°lydiagram

interface IRevealingEntity{
    <<property>>
    + Range : int
    
    + RevealNearby() : void
}

interface IKillable{
    + Death() : Void
}

class Ranger{
    - worldLocation : Vector3
    - salary : int
    + AddTarget(target: Predator) : void
    + OnHunterNearby(hunter: Hunter) : void
}

class Hunter{
    - worldLocation : Vector3
    + Hide() : void
    + Show() : void
    + OnRangerNearby(ranger: Ranger) : void
    + KillAnimal(target: Animal) : void
}

class Camera{
    - worldLocation : Vector3
}
class Drone{
    - worldLocation : Vector3
    - route : <Vector3, Vector3>
    - charge : int
    - findStation() : Vector3
}
class DroneStation{
    - worldLocation : Vector3
}
class AirShip{
    - worldLocation : Vector3
    - route : <Vector3, Vector3>
}

class Tourist{
    - currentVehicle? : Jeep
    + Pay() : int
}


IRevealingEntity <|.. Ranger
IRevealingEntity <|.. Camera
IRevealingEntity <|.. Drone
IRevealingEntity <|.. AirShip
IRevealingEntity <|.. Tourist

enum AnimalState{
    RESTING
    WANDERING
    HUNGRY
    THIRSTY
}

abstract class Animal{
    - worldLocation : Vector3
    - currentState : AnimalState
    - age : int
    - hunger : int
    - thirst : int
    + FindNextObjective() : Vector3
}

Animal "1" *-- AnimalState

abstract class Predator extends Animal{

}
class Predator1 extends Predator{
    + MateWith(other: Predator1) : Predator1
}
class Predator2 extends Predator{
    + MateWith(other: Predator2) : Predator2
}
abstract class Herbivore extends Animal{

}
class Herbivore1 extends Herbivore{
    + MateWith(other: Herbivore1) : Herbivore1
}
class Herbivore2 extends Herbivore{
    + MateWith(other: Herbivore2) : Herbivore2
}



Safari "1" *-- "*" Animal

IKillable <|.. Hunter
IKillable <|.. Ranger
IKillable <|.. Animal

@enduml