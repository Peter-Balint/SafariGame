@startuml oszt√°lydiagram

interface IRevealingEntity{
    <<property>>
    + Range : int
    
    + RevealNearby() : void
}

interface IKillable{
    + Death() : Void
}

class Ranger{
    - worldLocation : Vector3
    - salary : int
    + AddTarget(target: Predator) : void
    + OnHunterNearby(hunter: Hunter) : void
}

class Hunter{
    - worldLocation : Vector3
    + Hide() : void
    + Show() : void
    + OnRangerNearby(ranger: Ranger) : void
    + KillAnimal(target: Animal) : void
}

class Camera{
    - worldLocation : Vector3
}
class Drone{
    - worldLocation : Vector3
    - route : <Vector3, Vector3>
    - charge : int
    - findStation() : Vector3
}
class DroneStation{
    - worldLocation : Vector3
}
class AirShip{
    - worldLocation : Vector3
    - route : <Vector3, Vector3>
}

class Tourist{
    - currentVehicle? : Jeep
    + Pay() : int
}


IRevealingEntity <|.. Ranger
IRevealingEntity <|.. Camera
IRevealingEntity <|.. Drone
IRevealingEntity <|.. AirShip
IRevealingEntity <|.. Tourist

IKillable <|.. Hunter
IKillable <|.. Ranger
IKillable <|.. Animal
@enduml
@startuml
enum AnimalState{
    RESTING
    WANDERING
    HUNGRY
    THIRSTY
}

abstract class Animal{
    # worldLocation : Vector3
    # age : int
    # hunger : int
    # thirst : int
}

Animal "1" *-- "-currentState" AnimalState

abstract class Predator extends Animal{

}
class Lion extends Predator{
    
}
class Wolf extends Predator{
    
}
abstract class Herbivore extends Animal{

}
class Camel extends Herbivore{
    
}
class Sheep extends Herbivore{
    
}



Safari "1" *-- "*" Animal

Class MovementBehavior{

}
Class MovementCommand{

}
Class AnimalCollection{

}

Animal *-- "+Movement" MovementBehavior
AnimalCollection  *-- "-animals*" Animal

MovementBehavior *-- "-currentCommand" MovementCommand

@enduml