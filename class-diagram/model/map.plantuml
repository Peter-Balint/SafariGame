@startuml mapUml
class Map{
    +FieldChanged: EventHandler<GridPosition>?
    +EntranceCoords: GridPosition
    +ExitCoords: GridPosition
    +SizeX: int
    +SizeY: int
    +ChangeFieldAt(position: GridPosition, field: Field)
    +FieldAt(position: GridPosition): Field
}

class GridPosition{
    +x: int
    +y: int
}

abstract class Field{
    +CanDemolish(): boolean
    +CanPlaceHere(field: Ground): boolean
    +CanPlaceHere(field: Plant): boolean
    +CanPlaceHere(field: Road): boolean
    +CanPlaceHere(field: Water): boolean

}

class Ground{
    +CanDemolish(): boolean
    +CanPlaceHere(field: Ground): boolean
    +CanPlaceHere(field: Plant): boolean
    +CanPlaceHere(field: Road): boolean
    +CanPlaceHere(field: Water): boolean
    +CanPlaceHere(field: Gate): boolean


}

class Gate{
    +CanDemolish(): boolean
    +CanPlaceHere(field: Ground): boolean
    +CanPlaceHere(field: Plant): boolean
    +CanPlaceHere(field: Road): boolean
    +CanPlaceHere(field: Water): boolean
    +CanPlaceHere(field: Gate): boolean

}

abstract class Plant{
    +CanDemolish(): boolean
    +CanPlaceHere(field: Ground): boolean
    +CanPlaceHere(field: Plant): boolean
    +CanPlaceHere(field: Road): boolean
    +CanPlaceHere(field: Water): boolean
    +CanPlaceHere(field: Gate): boolean

}

class Road{
    +CanDemolish(): boolean
    +CanPlaceHere(field: Ground): boolean
    +CanPlaceHere(field: Plant): boolean
    +CanPlaceHere(field: Road): boolean
    +CanPlaceHere(field: Water): boolean
    +CanPlaceHere(field: Gate): boolean

}

class Water{
    +CanDemolish(): boolean
    +CanPlaceHere(field: Ground): boolean
    +CanPlaceHere(field: Plant): boolean
    +CanPlaceHere(field: Road): boolean
    +CanPlaceHere(field: Water): boolean
    +CanPlaceHere(field: Gate): boolean

}

Map "1" *-- "*\n-grid" Field
Field <|.. Ground
Field <|.. Gate
Field <|.. Plant
Field <|.. Road
Field <|.. Water
Field  o-- "+metadata" FieldMetadata


interface FieldFactory{
    +CreateField(): Field
}

class MapGenerator{
    +{static} GenerateMap(sizeX: int, sizeY: int):Map
}
@enduml